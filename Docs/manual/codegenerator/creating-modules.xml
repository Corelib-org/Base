<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook V5.0//EN" "http://www.oasis-open.org/docbook/xml/5.0/docbook.dtd">
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Creating modules</title>
	<para>
		
	</para>
	<section>
		<title>Codegenerator</title>
		<para>
		
		</para>
		<section>
			<title>Cxd files</title>
			<para>
				CXD files are XML files used for defining how the module should be generated by the codegenerator. An example format of the CXD file can be seen below.
			</para>	
				
			<programlisting>
				<![CDATA[
				<extension id="71662DFA-B67C-49BE-B1FD-D59D07BCEE23" enabled="true" locked="false">
					<setup>
						<name>Module name</name>
						<description>Module description</description>
					</setup>
					<props>
					</props>
					<extendprops id="bace91bc-9132-11db-9dfa-0003ffb1de2c">
					    <codewriter>
					        <class name="Classname" table="tbl_name" analyse="true|false" path="lib/modules/Module/">
					            <subclasses>
					                <class name="SubClassname" table="tbl_name" path="lib/modules/Module/">
					                    <generator name="CodeGeneratorBackofficeModel">
					                        <content table="tbl_name_content"/>
					                    </generator>
					                    <generator name="CodeGeneratorBackofficeModelList"/>
					                    <generator name="CodeGeneratorBackofficeInterface">
					                        <menu hidden="true"/>
					                        <view type="list">
					                            <field name="title"/>
					                            <field name="create_timestamp"/>
					                            </view>
					                        <view type="edit">
					                            <field name="title"/>
					                            <field name="content" mode="wysiwyg"/>
					                            <field name="start_timestamp" validation="optional"/>
					                        </view>
					                        <view type="create">
					                            <field name="title"/>
					                            <field name="start_timestamp" validation="optional"/>
					                        </view>
					                       
					                        <!--    Generate required code for rows to be deleted -->
					                        <view type="delete"/>
					                       
					                        <!-- Generate required code for rows to be moved, this however requires a sort_order column to be present -->
					                        <view type="move"/>
					                    </generator>
					                </class>
					            </subclasses>
					        </class>
					    </codewriter>
					</extendprops>
				</extension>
				]]>
			</programlisting>
			
			<para>
				When creating a new module, the id attrbute of the extension node, must be unique, and can be generated using the unix command "uuidgen". 
				
				The file itself is pretty self explanatory, but some of the generators aren't, so here follows explanations of them.
			</para>
			
			<para>
				1. CodeGeneratorBackofficeModel:
				Creates the modelling classes for the backoffice module classes. These classes are for singular objects, based on the table on which the code generator is 
				generating the classes. The model classes contain functionality such as loading data objects from the database, saving data and modifying data. 
			</para>
			
			<para>
				2. CodeGeneratorBackofficeModelList:
				Creates the modelling classes for the backoffice module list classes. The list classes can contain sorting options, the list functionality, and filtering options.  
			</para>
			<para>
				3. CodeGeneratorBackofficeInterface:
				The interface generator for backoffice is the one controlling the default look of the interface used by the user to read/modify/create data. The output is a standard 
				for backoffice, and is automatically implemented into backoffice. 
				
				<section>
					<title>Views</title>
					<para>
							The views implemented under the interface generator are used to define specific functionality. Here follows a description of the types of views currently 
							implemented into the CodeGeneratorBackofficeInterface generator:
					</para>
					<para>
						1. List:
						The list view type, is a standard functionality that generates a list of objects as long as needed. The list is used for gaining an overview of data in
						the database, and is the default view for any class.
					</para>
					<para>
						2. Create:
						The create view type creates a page where the user can, using forms, create a database entry (object). 
					</para>
					<para>
						3. Edit:
						The edit view type creates a page where the user can, using forms, edit a database entry (object). 
					</para>
					<para>
						4. Delete:
						The delete view type creates the functionality used to delete a database entry. An actual page is not created, but a button is put on the list page, where 
						the user can easily find it. Once clicked, the user is asked to confirm that he wants to delete that paticular entry. 
					</para>
					<para>
						5. Move:
						The move view type is an ordering tool, which allows the user to move an entry up or down on a list. The functionality doesnt work that well, currently, 
						and requires the user to manually set the ordering value of all entries he wants to move around to begin with, and the functionality doesnt check to see if
						an entry exists with the same ordering value. By version 2.0 we hope to have this fixed. 
					</para>
				</section>  
			</para>
		</section>
	</section>	
</section>