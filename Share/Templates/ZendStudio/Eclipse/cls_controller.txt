abstract class ${class_name}Modify implements Event {
	/**
	 * @var ${class_name}
	 */
	protected $$controller;
	
	function __construct(${class_name} $$controller){
		$$this->controller = $$controller;
	}
		
	public function getID(){
		return $$this->controller->getID();
	}
	
	public function getObj(){
		return $$this->controller;
	}
}
class ${class_name}ModifyBeforeCommit extends ${class_name}Modify  {
	
}
class ${class_name}ModifyBeforeDelete extends ${class_name}Modify  {
	
}
class ${class_name}ModifyAfterCommit extends ${class_name}Modify  {
	
}
class ${class_name}ModifyAfterDelete extends ${class_name}Modify  {
	
}

interface DAO_${class_name} {
	/**
 	* @return integer id on success, else return false
 	*/
	public function create();
	/**
	 * @return boolean true on success, else return false
	 */	
	public function update();
	/**
	 * @return array on success, else return false
	 */
	public function read($$id);
	/**
	 * @return boolean true on success, else return false
	 */
	public function delete($$id);
}

abstract class {class_name}View extends View { }
abstract class {class_name}List implements ViewList { }

class ${class_name} implements Output {
	private $$id = null;
	
	private $$dao = null;
	
	const FIELD_ID = '';
	
	const DAO = '${class_name}';

	public function __construct($$id = null, $$array = array()){
		$$this->id = $$id;
		if(sizeof($$array) > 0){
			$$this->_setFromArray($$array);
		}
	}
	
	public function getID(){
		return $$this->id;
	}
		
	public function delete(){
		return $$this->dao->delete($$this->id);
	}
	public function read(){
		$$this->_getDAO(false);
		if($$array = $$this->dao->read($$this->id)){
			$$this->_setFromArray($$array);
			return true;
		} else {
			return false;
		}
	}
		
	public function commit(){
		$$event = EventHandler::getInstance();
		$$this->_getDAO();
		try {
			$$event->triggerEvent(new ${class_name}ModifyBeforeCommit($$this));
			if(is_null($$this->id)){
				$$r = $$this->_create();
			} else {
				$$r = $$this->_update();
			}
			if($$r){
				$$event->triggerEvent(new ${class_name}ModifyAfterCommit($$this));
			}
			return $$r;
		} catch (BaseException $$e){
			echo $$e;
			exit;
		}
		return false;
	}

	public function getXML(DOMDocument $$xml){

	}
	public function &getArray(){ 

	}

	protected function _getDAO($$read=true){
		if(is_null($$this->dao)){
			$$this->dao = Database::getDAO(self::DAO);
			if($$read){
				$$this->read();
			}
		}
		return true;
	}
	protected function _create(){
		if($$this->id = $$this->dao->create($$this->title)){
			$$this->read();
			return true;
		} else {
			return false;
		}		
	}
	protected function _update(){
		if($$this->dao->update($$this->id, $$this->title)){
			$$this->read();
			return true;
		} else {
			return false;
		}
	}
	
	protected function _setFromArray($$array){
		if(!is_null($$array[self::FIELD_ID])){
			$$this->id = (int) $$array[self::FIELD_ID];
		}
	}
}