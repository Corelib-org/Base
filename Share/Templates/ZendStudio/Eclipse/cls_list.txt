interface DAO_${class}List {
	public function getList(DatabaseListHelperFilter $$filter, DatabaseListHelperOrder $$order, $$view=null, $$offset=null, $$limit=null);
	public function getListCount(DatabaseListHelperFilter $$filter);	
}

class ${class}List implements Output  {
	/**
	 * @var DAO_${class}List
	 */
	private $$dao = null;
	
	/**
	 * @var DatabaseListHelperOrder
	 */
	protected $$order = null;
	/**
	 * @var DatabaseListHelperFilter
	 */
	protected $$filter = null;
	
	/**
	 * @var ${class}ViewList
	 */		
	private $$view = null;
	
	private $$paging = false;
	private $$paging_page = 1;

	private $$limit = null;
	private $$offset = null;
	
	public function __construct(){
		$$this->order = new DatabaseListHelperOrder();
		$$this->filter = new DatabaseListHelperFilter();
	}
		
	public function setTitleFilter($$title){
		$$this->filter->set(${class}::FIELD_TITLE, $$title);
	}
	public function setTitleOrderDESC(){
		$$this->order->set(${class}::FIELD_TITLE, DATABASE_ORDER_DESC);
	}
	public function setTitleOrderASC(){
		$$this->order->set(${class}::FIELD_TITLE, DATABASE_ORDER_ASC);
	}

	public function setView(${class}ViewList $$view){
		$$this->view = $$view;
	}
	
	public function setPage($$page=1){
		$$this->paging = true;
		$$this->paging_page = $$page;
	}

	public function setLimit($$limit){
		$$this->limit = $$limit;
	}

	public function setOffset($$offset){
		$$this->offset = $$offset;
	}
	
	public function getXML(DOMDocument $$xml){
		$$this->_getDAO();
		$$list = $$xml->createElement('');
		
		if($$this->paging){
			$$count = $$this->getCount();
			$$list->setAttribute('count', $$count);
			$$this->setOffset($$this->limit * ($$this->paging_page - 1));
			$$list->appendChild(XMLTools::makePagerXML($$xml, $$count, $$this->limit, $$this->paging_page));
		}
		
		if(!is_null($$this->view)){
			$$res = $$this->dao->getList($$this->filter, $$this->order, $$this->view->getListHelper(), $$this->offset, $$this->limit);
		} else {
			$$res = $$this->dao->getList($$this->filter, $$this->order, null, $$this->offset, $$this->limit);	
		}		
		
		while ($$out = $$res->fetchArray()) {
			if(is_null($$this->view)){
				$$item = new ${class}($$out[${class}::FIELD_ID], $$out);
				$$list->appendChild($$item->getXML($$xml));
				$$list->appendChild($$item);
			} else {
				$$list->appendChild($$this->view->getViewXML($$out[${class}::FIELD_ID], $$out, $$xml));
			}
		}
		return $$list;
	}
	
	public function &getArray(){
		
	}
	
	private function _getDAO(){
		if(is_null($$this->dao)){
			$$this->dao = Database::getDAO('${class}List');
		}
		return true;
	}
}