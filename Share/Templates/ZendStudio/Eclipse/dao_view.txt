class MySQLi_${class_name}View extends DatabaseDAOView implements Singleton,DAO_${class_name}View {
	private static $$instance = null;
	
	const SELECT_COLUMNS = ',
	                        xml';
	
	/**
	 *	@return MySQLi_${class_name}View
	 */
	public static function getInstance(){
		if(is_null(self::$$instance)){
			self::$$instance = new MySQLi_${class_name}View();
		}
		return self::$$instance;	
	}
	
	protected function __construct(){
		parent::__construct();
		$$helper = new DatabaseViewHelper();
		$$helper->set(DATABASE_MYSQLI_VIEW_JOIN_TABLE, '');
		$$helper->set(DATABASE_MYSQLI_VIEW_JOIN_KEY, ${class_name}View::FIELD_ID);
		$$this->_setListHelper($$helper);
	}
	
	public function update($$id, $$xml){
		$$this->startTransaction();

		$$query = MySQLiTools::makeReplaceStatement('_view_', 
		                                           array(${class_name}View::FIELD_ID => '\''.$$id.'\'',
		                                                 ${class_name}View::FIELD_XML => '\''.$$xml.'\''));
		
		$$query = $$this->masterQuery(new MySQLiQuery($$query));

		if($$query->getAffectedRows() > 0){
			$$this->commit();
			return true;
		} else {
			$$this->rollback();	
			return false;	 
		}
	}
	public function read($$id){
	
		$$query = 'SELECT '.self::SELECT_COLUMNS.'
		          FROM _view_
		          WHERE '.$${class_name}View::FIELD_ID.'=\''.$$id.'\'';
		$$query = $$this->slaveQuery(new MySQLiQuery($$query));
		
		return $$query->fetchArray();
	}	
	public function delete($$id){
	
		$$query = 'DELETE FROM _view_
		          WHERE '.${class_name}View::FIELD_ID.'=\''.$$id.'\'';
		$$query = $$this->masterQuery(new MySQLiQuery($$query));
			
		if($$query->getAffectedRows() > 0){
			return true;
		} else {
			return false;	 
		}
	}
}